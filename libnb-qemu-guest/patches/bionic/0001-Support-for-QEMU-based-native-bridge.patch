From 6184117f3aaedcf1085230c66e31386aa60eb1eb Mon Sep 17 00:00:00 2001
From: Michael Goffioul <michael.goffioul@gmail.com>
Date: Mon, 18 May 2020 19:37:23 -0400
Subject: [PATCH] Support for QEMU-based native bridge

Change-Id: I9f79292e64dab0f9382a6ee08a62c0cc56a1ee39
---
 libc/bionic/malloc_common.cpp         |  3 ++
 libc/bionic/malloc_common_dynamic.cpp |  9 +++++
 libc/bionic/pthread_create.cpp        | 28 +++++++++++++++
 libc/bionic/pthread_exit.cpp          | 24 +++++++++++++
 libc/libc.map.txt                     |  3 ++
 libc/malloc_debug/malloc_debug.cpp    | 49 +++++++++++++++++++++++++++
 libc/private/bionic_fortify.h         |  2 +-
 linker/linker.cpp                     | 10 +++---
 linker/linker_phdr.cpp                |  2 ++
 9 files changed, 125 insertions(+), 5 deletions(-)

diff --git a/libc/bionic/malloc_common.cpp b/libc/bionic/malloc_common.cpp
index 9dc4d12d1..335601b7c 100644
--- a/libc/bionic/malloc_common.cpp
+++ b/libc/bionic/malloc_common.cpp
@@ -67,6 +67,9 @@ extern "C" void* calloc(size_t n_elements, size_t elem_size) {
   if (__predict_false(result == nullptr)) {
     warning_log("calloc(%zu, %zu) failed: returning null pointer", n_elements, elem_size);
   }
+  if (result != nullptr) {
+    memset(result, 0, n_elements * elem_size);
+  }
   return result;
 }
 
diff --git a/libc/bionic/malloc_common_dynamic.cpp b/libc/bionic/malloc_common_dynamic.cpp
index 803574649..12fa44782 100644
--- a/libc/bionic/malloc_common_dynamic.cpp
+++ b/libc/bionic/malloc_common_dynamic.cpp
@@ -69,6 +69,8 @@
 #include "malloc_heapprofd.h"
 #include "malloc_limit.h"
 
+//#define MALLOC_DEBUG
+
 // =============================================================================
 // Global variables instantations.
 // =============================================================================
@@ -231,10 +233,17 @@ static bool CheckLoadMallocHooks(char** options) {
 
 static bool CheckLoadMallocDebug(char** options) {
   // If kDebugMallocEnvOptions is set then it overrides the system properties.
+#ifdef MALLOC_DEBUG
+  static char nb_qemu_options[] = "abort_on_error verify_pointers fill verbose";
+#endif
   char* env = getenv(kDebugEnvOptions);
   if (env == nullptr || env[0] == '\0') {
     if (__system_property_get(kDebugPropertyOptions, *options) == 0 || *options[0] == '\0') {
+#ifdef MALLOC_DEBUG
+      *options = nb_qemu_options;
+#else
       return false;
+#endif
     }
 
     // Check to see if only a specific program should have debug malloc enabled.
diff --git a/libc/bionic/pthread_create.cpp b/libc/bionic/pthread_create.cpp
index 4cf14ad72..9a2f65f2f 100644
--- a/libc/bionic/pthread_create.cpp
+++ b/libc/bionic/pthread_create.cpp
@@ -428,3 +428,31 @@ int pthread_create(pthread_t* thread_out, pthread_attr_t const* attr,
 
   return 0;
 }
+
+extern "C" pid_t __getpid();
+
+extern "C"
+int __pthread_allocate_self(void **stack, void **tls) {
+  pthread_attr_t attr;
+  pthread_attr_init(&attr);
+  pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
+
+  bionic_tcb* tcb = nullptr;
+  void* child_stack = nullptr;
+  int result = __allocate_thread(&attr, &tcb, &child_stack);
+  if (result != 0) {
+      return result;
+  }
+
+  pthread_internal_t* thread = tcb->thread();
+
+  thread->set_cached_pid(__getpid());
+  thread->tid = __get_thread()->tid;
+  __init_thread(thread);
+  __pthread_internal_add(thread);
+
+  *stack = child_stack;
+  *tls = &tcb->tls_slot(0);
+
+  return 0;
+}
diff --git a/libc/bionic/pthread_exit.cpp b/libc/bionic/pthread_exit.cpp
index 3b873b314..b3bc2b5a8 100644
--- a/libc/bionic/pthread_exit.cpp
+++ b/libc/bionic/pthread_exit.cpp
@@ -138,3 +138,27 @@ void pthread_exit(void* return_value) {
   __hwasan_thread_exit();
   __exit(0);
 }
+
+extern "C"
+void __pthread_deallocate_self(void **stack, size_t *size) {
+  __cxa_thread_finalize();
+
+  pthread_internal_t* thread = __get_thread();
+
+  while (thread->cleanup_stack) {
+    __pthread_cleanup_t* c = thread->cleanup_stack;
+    thread->cleanup_stack = c->__cleanup_prev;
+    c->__cleanup_routine(c->__cleanup_arg);
+  }
+
+  pthread_key_clean_all();
+
+  ScopedSignalBlocker ssb;
+
+  __free_dynamic_tls(__get_bionic_tcb());
+  __set_tid_address(nullptr);
+  __pthread_internal_remove(thread);
+
+  *stack = thread->mmap_base;
+  *size = thread->mmap_size;
+}
diff --git a/libc/libc.map.txt b/libc/libc.map.txt
index 88192239a..d47e30086 100644
--- a/libc/libc.map.txt
+++ b/libc/libc.map.txt
@@ -1478,6 +1478,9 @@ LIBC_Q { # introduced=Q
 
     # Used by libandroid_runtime, libmedia and libmediautils
     android_mallopt; # apex
+
+    __pthread_allocate_self;
+    __pthread_deallocate_self;
 } LIBC_P;
 
 LIBC_PRIVATE {
diff --git a/libc/malloc_debug/malloc_debug.cpp b/libc/malloc_debug/malloc_debug.cpp
index 53fcead01..00fd7d616 100644
--- a/libc/malloc_debug/malloc_debug.cpp
+++ b/libc/malloc_debug/malloc_debug.cpp
@@ -54,6 +54,8 @@
 #include "malloc_debug.h"
 #include "UnwindBacktrace.h"
 
+//#define MALLOC_DEBUG
+
 // ------------------------------------------------------------------------
 // Global Data
 // ------------------------------------------------------------------------
@@ -420,7 +422,11 @@ static void* InternalMalloc(size_t size) {
   return pointer;
 }
 
+#ifdef MALLOC_DEBUG
+void* _debug_malloc(size_t size) {
+#else
 void* debug_malloc(size_t size) {
+#endif
   if (DebugCallsDisabled()) {
     return g_dispatch->malloc(size);
   }
@@ -496,7 +502,11 @@ static void InternalFree(void* pointer) {
   }
 }
 
+#ifdef MALLOC_DEBUG
+void _debug_free(void* pointer) {
+#else
 void debug_free(void* pointer) {
+#endif
   if (DebugCallsDisabled() || pointer == nullptr) {
     return g_dispatch->free(pointer);
   }
@@ -514,7 +524,11 @@ void debug_free(void* pointer) {
   InternalFree(pointer);
 }
 
+#ifdef MALLOC_DEBUG
+void* _debug_memalign(size_t alignment, size_t bytes) {
+#else
 void* debug_memalign(size_t alignment, size_t bytes) {
+#endif
   if (DebugCallsDisabled()) {
     return g_dispatch->memalign(alignment, bytes);
   }
@@ -593,7 +607,11 @@ void* debug_memalign(size_t alignment, size_t bytes) {
   return pointer;
 }
 
+#ifdef MALLOC_DEBUG
+void* _debug_realloc(void* pointer, size_t bytes) {
+#else
 void* debug_realloc(void* pointer, size_t bytes) {
+#endif
   if (DebugCallsDisabled()) {
     return g_dispatch->realloc(pointer, bytes);
   }
@@ -712,7 +730,11 @@ void* debug_realloc(void* pointer, size_t bytes) {
   return new_pointer;
 }
 
+#ifdef MALLOC_DEBUG
+void* _debug_calloc(size_t nmemb, size_t bytes) {
+#else
 void* debug_calloc(size_t nmemb, size_t bytes) {
+#endif
   if (DebugCallsDisabled()) {
     return g_dispatch->calloc(nmemb, bytes);
   }
@@ -766,6 +788,33 @@ void* debug_calloc(size_t nmemb, size_t bytes) {
   return pointer;
 }
 
+#ifdef MALLOC_DEBUG
+void* debug_malloc(size_t size) {
+  void* pointer = _debug_malloc(size);
+  info_log("malloc[%d] => %p", size, pointer);
+  return pointer;
+}
+void debug_free(void* pointer) {
+  info_log("free[%p]", pointer);
+  _debug_free(pointer);
+}
+void* debug_memalign(size_t alignment, size_t bytes) {
+  void* pointer = _debug_memalign(alignment, bytes);
+  info_log("memalign[%d, %d] => %p", alignment, bytes, pointer);
+  return pointer;
+}
+void* debug_realloc(void* pointer, size_t bytes) {
+  void* new_pointer = _debug_realloc(pointer, bytes);
+  info_log("realloc[%p, %d] => %p", pointer, bytes, new_pointer);
+  return new_pointer;
+}
+void* debug_calloc(size_t nmemb, size_t bytes) {
+  void* pointer = _debug_calloc(nmemb, bytes);
+  info_log("calloc[%d, %d] => %p", nmemb, bytes, pointer);
+  return pointer;
+}
+#endif
+
 struct mallinfo debug_mallinfo() {
   return g_dispatch->mallinfo();
 }
diff --git a/libc/private/bionic_fortify.h b/libc/private/bionic_fortify.h
index 3c3292e58..55064a936 100644
--- a/libc/private/bionic_fortify.h
+++ b/libc/private/bionic_fortify.h
@@ -38,7 +38,7 @@
 static inline __noreturn void __fortify_fatal(const char* fmt, ...) {
   va_list args;
   va_start(args, fmt);
-  async_safe_fatal_va_list("FORTIFY", fmt, args);
+  async_safe_fatal_va_list("FORTIFY [arm]", fmt, args);
   va_end(args);
   abort();
 }
diff --git a/linker/linker.cpp b/linker/linker.cpp
index b59df7302..5b7c79408 100644
--- a/linker/linker.cpp
+++ b/linker/linker.cpp
@@ -85,10 +85,10 @@ static LinkerTypeAllocator<LinkedListEntry<soinfo>> g_soinfo_links_allocator;
 static LinkerTypeAllocator<android_namespace_t> g_namespace_allocator;
 static LinkerTypeAllocator<LinkedListEntry<android_namespace_t>> g_namespace_list_allocator;
 
-static const char* const kLdConfigArchFilePath = "/system/etc/ld.config." ABI_STRING ".txt";
+static const char* const kLdConfigArchFilePath = "/system/lib/arm/ld.config." ABI_STRING ".txt";
 
-static const char* const kLdConfigFilePath = "/system/etc/ld.config.txt";
-static const char* const kLdConfigVndkLiteFilePath = "/system/etc/ld.config.vndk_lite.txt";
+static const char* const kLdConfigFilePath = "/system/lib/arm/ld.config.txt";
+static const char* const kLdConfigVndkLiteFilePath = "/system/lib/arm/ld.config.vndk_lite.txt";
 
 #if defined(__LP64__)
 static const char* const kSystemLibDir        = "/system/lib64";
@@ -99,7 +99,8 @@ static const char* const kAsanOdmLibDir       = "/data/asan/odm/lib64";
 static const char* const kAsanVendorLibDir    = "/data/asan/vendor/lib64";
 static const char* const kRuntimeApexLibDir   = "/apex/com.android.runtime/lib64";
 #else
-static const char* const kSystemLibDir        = "/system/lib";
+static const char* const kSystemLibDir        = "/system/lib/arm";
+static const char* const kSystemNbLibDir      = "/system/lib/arm/nb";
 static const char* const kOdmLibDir           = "/odm/lib";
 static const char* const kVendorLibDir        = "/vendor/lib";
 static const char* const kAsanSystemLibDir    = "/data/asan/system/lib";
@@ -111,6 +112,7 @@ static const char* const kRuntimeApexLibDir   = "/apex/com.android.runtime/lib";
 static const char* const kAsanLibDirPrefix = "/data/asan";
 
 static const char* const kDefaultLdPaths[] = {
+  kSystemNbLibDir,
   kSystemLibDir,
   kOdmLibDir,
   kVendorLibDir,
diff --git a/linker/linker_phdr.cpp b/linker/linker_phdr.cpp
index 353428730..5c483ceed 100644
--- a/linker/linker_phdr.cpp
+++ b/linker/linker_phdr.cpp
@@ -656,6 +656,8 @@ bool ElfReader::LoadSegments() {
         DL_ERR("couldn't map \"%s\" segment %zd: %s", name_.c_str(), i, strerror(errno));
         return false;
       }
+      INFO("[ map: %p - %p  %08x  %016llx - %s ]",
+           seg_addr, reinterpret_cast<char *>(seg_addr) + file_length, file_length, file_offset_ + file_page_start, name_.c_str());
     }
 
     // if the segment is writable, and does not end on a page boundary,
-- 
2.25.1

